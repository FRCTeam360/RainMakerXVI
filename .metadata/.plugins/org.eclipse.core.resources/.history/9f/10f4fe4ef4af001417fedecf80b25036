
package org.usfirst.frc.team360.robot;

import edu.wpi.first.wpilibj.smartdashboard.SmartDashboard;
import edu.wpi.first.wpilibj.Compressor;
import edu.wpi.first.wpilibj.CounterBase.EncodingType;
import edu.wpi.first.wpilibj.DoubleSolenoid;
import edu.wpi.first.wpilibj.Encoder;
import edu.wpi.first.wpilibj.IterativeRobot;
import edu.wpi.first.wpilibj.Joystick;
import edu.wpi.first.wpilibj.PIDController;
import edu.wpi.first.wpilibj.PIDSource.PIDSourceParameter;
import edu.wpi.first.wpilibj.RobotDrive;
import edu.wpi.first.wpilibj.Timer;
import edu.wpi.first.wpilibj.VictorSP;
import edu.wpi.first.wpilibj.buttons.Button;
import edu.wpi.first.wpilibj.buttons.JoystickButton;
import edu.wpi.first.wpilibj.livewindow.LiveWindow;

/**
 * The VM is configured to automatically run this class, and to call the
 * functions corresponding to each mode, as described in the IterativeRobot
 * documentation. If you change the name of this class or the package after
 * creating this project, you must also update the manifest file in the resource
 * directory.
 */

//tank drive 2 Joysticks, left trigger engages down speed right trigger activates up speed

public class Robot extends IterativeRobot {

	OI controls = new OI(); 

	Encoder encoder = new Encoder( 0, 1, true, EncodingType.k1X);
	
	double Enc = encoder.get();
	
	//PIDController PID = new PIDController(Const.KP, Const.KI, Const.KD, encoder, liftMotor, Const.PIDPeriod); 
	
	public static double error;
	public static double integral;
	public static double derivative;
	public static double output;
	public static double prevError;
	
	public static float encVal;
	
	public static boolean liftTR1;
	public static boolean liftTR2;
	public static boolean liftTR3;
	public static boolean valThing;
	public static boolean manOverRide;
	
    /**
     * This function is run when the robot is first started up and should be
     * used for any initialization code.
     */
	
    public void robotInit() {
    	
    	controls.init();
    	
      	encoder.reset();
      	
    	encoder.setMaxPeriod(.1);
    	
      	encoder.setMinRate(10);
      	
    	encoder.setDistancePerPulse(5);
    	
      	encoder.setReverseDirection(true);
      	
      	encoder.setSamplesToAverage(7);
      	
    	LiveWindow.run();
    	
    	controls.liftMotor.enableDeadbandElimination(true);
    	
    }
   
    public void disabledInit() {
    	
    	controls.compressor.stop();//set percent to 0
    	
      	SmartDashboard.putString( "Robot Status: ", "Deactivated");
     	SmartDashboard.putString( "Teleop Status: ", "");
      	SmartDashboard.putString( "Autonomous Status: ", ""); 
      	SmartDashboard.putString( "Test Status: ", ""); 
     	
    }
    
    public void autonomousInit() {
    	
    	controls.compressor.start();
    	
    	encoder.reset();
    	
    	controls.autoLoopCounter = 0;
    	
      	SmartDashboard.putString( "Autonomous Status: ", "Active"); 
    	
    }

    /**
     * This function is called periodically during autonomous
     */
   
	public void autonomousPeriodic() {

    }
    
    /**
     * This function is called once each time the robot enters tele-operated mode
     */
    
	public void teleopInit(){
		
		//controls.compressor.start();
		
		liftTR1 = false;  
		
		encoder.reset();// resets encoder
		
     	SmartDashboard.putString( "Teleop Status: ", "Active");
     	
	    SmartDashboard.putString("Lift Status: ", "");//clears vals of smart window
	     
    }

    /**
     * This function is called periodically during operator control
     */
	
    public void teleopPeriodic() {
    
    	controls.valJoyR = controls.stickR.getRawAxis(1);
    	controls.valJoyL = controls.stickL.getRawAxis(1);
    	
    	controls.up = controls.stickR.getRawButton(1);
    	controls.down = controls.stickL.getRawButton(1);
    	controls.grab = controls.gamePad.getRawButton(1);
    	controls.release = controls.gamePad.getRawButton(2);
    	
    	controls.valGamePad = controls.gamePad.getRawAxis(1);
    	
       	intakeControl();
    	
      	Timer.delay(0.005); // wait for motor update time
      	                           
      	encVal = encoder.get();

      	setTarget();
      	
      	System.out.println(liftTR1 + "Lift Tr place");
      	
      	manOverRide = true;
      	
      	if (manOverRide == true){
      		
      		controls.liftMotor.set(.7);
      		
      		System.out.println("hello");
      		
      	} else if (liftTR1 == true){
	      		
	      		liftControl1();
	      		
	      	} else if (encVal > 10) {
	      		
	      		controls.liftMotor.set(-.5);
	      		
	      	} else {
	      		
	      		controls.liftMotor.stopMotor();
	      	}
      	
      	
        if (controls.valJoyR >= .01 || controls.valJoyR <= -.01 || controls.valJoyL >= .01 || controls.valJoyL <= -.01){
        	
        	//System.out.println("tank active");
        	
        	if(controls.up == true && controls.down == false) {
        		
        		controls.halfSpeed = true;
 
        	} else if(controls.down == true && controls.up == false){
        	
        		controls.halfSpeed = false;

        	}
        
        	if (controls.halfSpeed == false){
        	
        		fullSpeedDrive();
        		
              	SmartDashboard.putString("Drive Status: ", "Full");
        		
        	} else if (controls.halfSpeed == true){
        	
        		halfSpeedDrive();
        	
              	SmartDashboard.putString("Drive Status: ", "Half");
        		
        	}
        }  
    }
    
    public void intakeControl() {
    	
    	controls.grab = controls.gamePad.getRawButton(7);
    	controls.release = controls.gamePad.getRawButton(8);   		       
    		
    		if (controls.grab==true && controls.release == false){
    			
    			controls.intakeSol.set(DoubleSolenoid.Value.kForward);//grab
                
    			SmartDashboard.putString("Solenoid Status: ", "Forward");
                
            } else if (controls.release==true && controls.grab == false) {
            	
            	controls.intakeSol.set(DoubleSolenoid.Value.kReverse);//release
                
    			SmartDashboard.putString("Solenoid Status: ", "Reverse");
                
            }
   }
    
    public void fullSpeedDrive(){
    	
    	double joyR = controls.stickR.getRawAxis(1);
        double joyL = controls.stickL.getRawAxis(1); 
        
    	Timer.delay(0.005);
    	
    	joyR *= .95;
    	joyL *= .95;
    	
    	controls.myRobot.tankDrive(-joyR, -joyL);
    	
    }
    
    public void halfSpeedDrive(){
    	
    	double joyR = controls.stickR.getRawAxis(1);
        double joyL = controls.stickL.getRawAxis(1); 
        
    	Timer.delay(0.005);
    	
    	joyR *= .7;
    	joyL *= .7;
    	
    	controls.myRobot.tankDrive(-joyR, -joyL);
    	
    }
    
    public void setTarget(){
    	
    	if (controls.gamePad.getRawButton(1) == true && controls.gamePad.getRawButton(2) == false
    	&& controls.gamePad.getRawButton(3) == false &&  controls.gamePad.getRawButton(9) == false
    	&& controls.gamePad.getRawButton(10) == false){
    		
      		liftTR1 = true;
      		
      		controls.liftTarget = Const.liftLevel1;  
      		
      		SmartDashboard.putString("Lift Status: ", "Level 1");
      		
    	} else if (controls.gamePad.getRawButton(1) == false &&  controls.gamePad.getRawButton(2) == true
    	&&  controls.gamePad.getRawButton(3) == false &&  controls.gamePad.getRawButton(9) == false
    	&&  controls.gamePad.getRawButton(10) == false){
    		
    	     liftTR1 = true;
    	     
    	     controls.liftTarget = Const.liftLevel2;  
    	     
    	     SmartDashboard.putString("Lift Status: ", "Level 2");
    	     
    	} else if (controls.gamePad.getRawButton(1) == false &&  controls.gamePad.getRawButton(2) == false
    	&&  controls.gamePad.getRawButton(3) == true &&  controls.gamePad.getRawButton(9) == false
    	&&  controls.gamePad.getRawButton(10) == false){
    		
    	    liftTR1 = true;
    	    
    	    controls.liftTarget = Const.liftLevel3;  
    	    
    	    SmartDashboard.putString("Lift Status: ", "Level 3");
    	    
    	} else if (controls.gamePad.getRawButton(1) == false &&  controls.gamePad.getRawButton(2) == false
        &&  controls.gamePad.getRawButton(3) == false &&  controls.gamePad.getRawButton(9) == true
    	&&  controls.gamePad.getRawButton(10) == false){
    		
    	     liftTR1 = true;
    	     
    	     controls.liftTarget = Const.liftLeveldrive; 
    	     
    	     SmartDashboard.putString("Lift Status: ", "Level Drive");
    	     
    	} else if (controls.gamePad.getRawButton(1) == false &&  controls.gamePad.getRawButton(2) == false
    	&&  controls.gamePad.getRawButton(3) == false &&  controls.gamePad.getRawButton(9) == false
    	&&  controls.gamePad.getRawButton(10) == true){
    	    
    			liftTR1 = false;
    		
    	}
    }
    
    public void liftControl1() {
    	
    	//set the pid vals to variable USE THESE IN DECLARATION
    	// call liftControl from teleop periodic
    	//get encoder value
    	//hardcode the target for now for testing - always do Lift routine to same spot, eg. 1000

    	double p = 0.001; 
    	double i = 0;
    	double d = 0.0015;
    	double Dt = 0.01; 
    	
    	System.out.println(encVal + "encval 1.1");
    	
    	double PIDOUTPUT1 = doPID1(p, i, d, Dt, -encVal, controls.liftTarget);// ONLY CHANGE THE LAST NUMBER DO NOT TOUCH ANYTHING ELSE HERE
    	
	    System.out.println(PIDOUTPUT1 + "output 1.11");
	    
	    PIDOUTPUT1 /= 10;   
     
    	//scales output back by 100 since the potentiometer says a few hundred counts equals less than 100 degrees in RL

    	if(PIDOUTPUT1 > 1){
    		
    		System.out.println("#1.1");
    		
    		PIDOUTPUT1 = .7; 
    		
    		controls.liftMotor.set(PIDOUTPUT1);
 
    		}
    	
    	if (PIDOUTPUT1 < -1){
    		
    		System.out.println("#2.1");
    		
    		PIDOUTPUT1 = .7;
    		
    		controls.liftMotor.set(PIDOUTPUT1);
       
    		}
    	              
    	if (PIDOUTPUT1 > -1 || PIDOUTPUT1 < 1){
    		
    		System.out.println("#4.1");
    
    		controls.liftMotor.set(PIDOUTPUT1);

    		}
    	
    	//System.out.println(encVal + "encval 2");
    	
    }
    
    public void liftControl2() {
    	
    	//set the pid vals to variable USE THESE IN DECLARATION
    	// call liftControl from teleop periodic
    	//get encoder value
    	//hardcode the target for now for testing - always do Lift routine to same spot, eg. 1000

    	encVal = encoder.get();
    	
    	double p = 0.001; 
    	double i = 0;
    	double d = 0.0015;
    	double Dt = 0.01; 
    	
    	System.out.println(encVal + "encval 1");
    	
    	double PIDOUTPUT2 = doPID2(p, i, d, Dt, -encVal, 4000);// ONLY CHANGE THE LAST NUMBER DO NOT TOUCH ANYTHING ELSE HERE
    
    	System.out.println(PIDOUTPUT2 + "output 1");
    
    	PIDOUTPUT2 /= 10;   
    	
    	//scales output back by 100 since the potentiometer says a few hundred counts equals less than 100 degrees in RL
    
    	if (PIDOUTPUT2 > -1 || PIDOUTPUT2 < 1){
 		
    		System.out.println("#4.2");
 
    		controls.liftMotor.set(PIDOUTPUT2);

 		} else if(PIDOUTPUT2 > 1){
    		
    		System.out.println("#1.2");
    		
    		PIDOUTPUT2 = .7; 
    		
    		controls.liftMotor.set(PIDOUTPUT2);

    	} else if (PIDOUTPUT2 < -1){
    		
    		System.out.println("#2.2");
    		
    		PIDOUTPUT2 = .7;
    		
    		controls.liftMotor.set(PIDOUTPUT2);

    	}
    	
    	//System.out.println(encVal + "encval 2");
    	
    }

    public double doPID1(double P, double I, double D, double dt, float position, float setPoint){ //arm to left is less than 470; to the right greater than 470
    	
       	//you need to translate this into Java syntax and declare your variables
	    //I think the output is the speed

    	Timer.delay(dt);

		SmartDashboard.putDouble( "position: ", position); 
      	SmartDashboard.putDouble( "setPoint: ", setPoint);
      	
		error = position - setPoint;
		integral = integral + (error * dt);
		derivative = (error - prevError) / dt;
		output = (P * error) + (I * integral) + (D * derivative);
		prevError = error;
		
		SmartDashboard.putDouble( "error: ", error); 
		SmartDashboard.putDouble( "output: ", output); 
		
		return -output;
    	
	}
    
    public double doPID2(double P, double I, double D, double dt, float position, float setPoint){ //arm to left is less than 470; to the right greater than 470
    	
       	//you need to translate this into Java syntax and declare your variables
	    //I think the output is the speed
  
    	Timer.delay(dt);

      	SmartDashboard.putDouble( "position: ", position); 
      	SmartDashboard.putDouble( "setPoint: ", setPoint);
    	
		error = position - setPoint;
		integral = integral + (error * dt);
		derivative = (error - prevError) / dt;
		output = (P * error) + (I * integral) + (D * derivative);
		prevError = error;
		
		SmartDashboard.putDouble( "error: ", error); 
		SmartDashboard.putDouble( "output: ", output); 

		return -output;
    	
	}

	/**
     * This function is called periodically during test mode
     */
    
    public void testPeriodic() {
    	
    	LiveWindow.run();
    	
      	SmartDashboard.putString( "Test Status: ", "Enabled"); 
    	
    }  
}