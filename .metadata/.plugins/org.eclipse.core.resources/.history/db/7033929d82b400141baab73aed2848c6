package org.usfirst.frc.team360.robot;

import edu.wpi.first.wpilibj.smartdashboard.SendableChooser;
import edu.wpi.first.wpilibj.smartdashboard.SmartDashboard;
import edu.wpi.first.wpilibj.Compressor;
import edu.wpi.first.wpilibj.CounterBase.EncodingType;
import edu.wpi.first.wpilibj.DoubleSolenoid;
import edu.wpi.first.wpilibj.Encoder;
import edu.wpi.first.wpilibj.IterativeRobot;
import edu.wpi.first.wpilibj.Joystick;
import edu.wpi.first.wpilibj.PIDController;
import edu.wpi.first.wpilibj.PIDSource.PIDSourceParameter;
import edu.wpi.first.wpilibj.RobotDrive;
import edu.wpi.first.wpilibj.Timer;
import edu.wpi.first.wpilibj.VictorSP;
import edu.wpi.first.wpilibj.buttons.Button;
import edu.wpi.first.wpilibj.buttons.JoystickButton;
import edu.wpi.first.wpilibj.command.Command;
import edu.wpi.first.wpilibj.command.Scheduler;
import edu.wpi.first.wpilibj.livewindow.LiveWindow;
import edu.wpi.first.wpilibj.DigitalInput;

/**
 * The VM is configured to automatically run this class, and to call the
 * functions corresponding to each mode, as described in the IterativeRobot
 * documentation. If you change the name of this class or the package after
 * creating this project, you must also update the manifest file in the resource
 * directory.
 */

//tank drive 2 Joysticks, left trigger engages down speed right trigger activates up speed

public class Robot extends IterativeRobot {

	Command autonomousCommand;
	
	SendableChooser autoChooser;
	
	OI controls = new OI(); 

	Encoder encoderLift;
	Encoder encoderR;
	Encoder encoderL;
	
	private int autoStage;
	
	private double error;
	private double integral;
	private double derivative;
	private double output;
	private double prevError;
	
	private float encValLift;
	private float encValR;
	private float encValL;
	
	private boolean liftPID;
	private boolean liftPIDLVL1;
	private boolean liftPIDLVL2;
	private boolean liftPIDLVL3;
	private boolean manOverRide;
	
    /**
     * This function is run when the robot is first started up and should be
     * used for any initialization code.
     */
	
    public void robotInit() {
    	
    	encoderLift = new Encoder( 0, 1, true, EncodingType.k1X);
    	encoderR = new Encoder( 2, 3, true, EncodingType.k1X);
    	encoderL = new Encoder( 4, 5, true, EncodingType.k1X);
    	
    	autoChooser = new SendableChooser();
    	
    	autoChooser.addDefault("default program", new autoGrabturnRight());
    	
    	autoChooser.addObject("exper", new forwardGrabNBack());
    	
    	SmartDashboard.putData("Auto mode chooser", autoChooser);
    	
    	controls.init();
    	
      	encoderLift.reset();
      	encoderR.reset();
      	encoderL.reset();
      	
    	encoderLift.setMaxPeriod(.1);
    	encoderR.setMaxPeriod(.1);
    	encoderL.setMaxPeriod(.1);
    	
      	encoderLift.setMinRate(10);
      	encoderR.setMinRate(10);
      	encoderL.setMinRate(10);
      	
    	encoderLift.setDistancePerPulse(5);
    	encoderR.setDistancePerPulse(5);
    	encoderL.setDistancePerPulse(5);
    	
      //	encoderLift.setReverseDirection(true);
      //	encoderR.setReverseDirection(true);
      	encoderL.setReverseDirection(true);
      	
      	encoderLift.setSamplesToAverage(7);
      	encoderR.setSamplesToAverage(7);
      	encoderL.setSamplesToAverage(7);
      	
    	LiveWindow.run();
    	
    	controls.liftMotor.enableDeadbandElimination(true);
    	
    }
   
    public void disabledInit() {
    	
    	controls.compressor.stop();//set percent to 0
    	
      	SmartDashboard.putString( "Robot Status: ", "Deactivated");
     	SmartDashboard.putString( "Teleop Status: ", "");
      	SmartDashboard.putString( "Autonomous Status: ", ""); 
      	SmartDashboard.putString( "Test Status: ", ""); 
     	
    }
    
    public void autonomousInit() {
    	
    	autonomousCommand = (Command) autoChooser.getSelected();
    	
    	autonomousCommand.start();
    	
    	autoStage = 1;
    	
    	controls.compressor.start();
    	
    	encoderLift.reset();
    	encoderR.reset();
    	encoderL.reset();
    	
    	controls.autoLoopCounter = 0;
    	
      	SmartDashboard.putString( "Autonomous Status: ", "Active"); 
    	
    }

    /**
     * This function is called periodically during autonomous
     */
   
	public void autonomousPeriodic() {
		
		Scheduler.getInstance().run();
		
		//limit1.get();
	    //limit2.get();
		
		double p = 0.001; 
		double i = 0;
		double d = 0.0015;
		double Dt = 0.01;
		
		//encValR = encoderR.get();
		
		autoGrabturnRight();
	
    }
	
	public void autoGrabturnRight(){
		
		//limit1.get();
	    //limit2.get();
		
		double p = 0.001; 
		double i = 0;
		double d = 0.0015;
		double Dt = 0.01;
		
		//encValR = encoderR.get();                                                                                                                                        
		
	switch(autoStage){
			
			case 1: //grab
				
				controls.intakeSol.set(DoubleSolenoid.Value.kForward);
				
				autoStage = 2;
				
			case 2: // start lifting to driving level, switch to stage 3 if half way up
				
				controls.liftTarget = Const.liftLeveldrive;  
				
				liftControl1();
				
				if (encValLift > Const.liftLeveldrive - 30){
					
					autoStage = 3;
					
					encoderR.reset();
					encoderL.reset();
					
				}
			case 3:	//turn right while still maintaining lift
				
				controls.liftTarget = Const.liftLevel1;  
				
				liftControl1();
				
				encValL = encoderL.get();
				
				if (encValL < 720){ //!!!!!!!!!!!!!need to adjust value or run through distance calculator!!!!!!!!!!!!!!!!!!
					
					controls.myRobot.tankDrive(-0.3, 0.3);
					
				}
				
				else {
					
					controls.myRobot.tankDrive(0, 0);
					
					autoStage = 4;
					
					encoderR.reset();
					encoderL.reset();
				}	
			case 4: //go forward about eight feet to auto zone while still maintaining lift
				    //wheels are 4" in diameter, so 1 rotation is 12.56 inches, approx 1 foot
				    //so need to go about 8 rotations.
				    //there are x encoder ticks per wheel rotation, based on the gearing and 360 ticks per encoder rotation.
				    //!!right now estimating 400 ticks per wheel rotation.!!!!
				    //big gear has 80 teeth

				controls.liftTarget = Const.liftLevel1;  
				
				liftControl1();
				
				encValL = encoderL.get();
				
				if (encValL < 3200){ //!!!!!!!!!!!!!need to adjust value or run through distance calculator!!!!!!!!!!!!!!!!!!
					
					controls.myRobot.tankDrive(0.3, 0.3);
					
				}
				
				else {
					
					controls.myRobot.tankDrive(0, 0);
					
					autoStage = 5;
					
					encoderR.reset();
					encoderL.reset();
					
				}	
			case 5:	
		}
		
		//left off fixing up code here
	
			encoderR.reset();
			encoderL.reset();
			
	    /**
	     * This function is called once each time the robot enters tele-operated mode
	     */
	 	
	 	//controls.motorR.set(PIDautoR);	
	 	//controls.motorL.set(PIDautoL);
			
		//encoderR.reset();
		//encoderL.reset();
	 	
    }
	 
	public void teleopInit(){
		
		//controls.compressor.start();
		
		liftPID = false;  
		
		encoderLift.reset();// resets encoder
		encoderR.reset();
		encoderL.reset();
		
     	SmartDashboard.putString( "Teleop Status: ", "Active");
     	
	    SmartDashboard.putString("Lift Status: ", "");//clears vals of smart window
	     
    }

    /**
     * This function is called periodically during operator control
     */
	
    public void teleopPeriodic() {
    
    	controls.valJoyR = controls.stickR.getRawAxis(1);
    	controls.valJoyL = controls.stickL.getRawAxis(1);
    	
    	//controls.valGamePad = controls.gamePad.getRawAxis(1); don't need - we aren't using this any longer
    	
    	//controls.up = controls.stickR.getRawButton(1); DON'T NEED HERE - IS READ LATER IN TANK METHOD
    	//controls.down = controls.stickL.getRawButton(1); DON'T NEED HERE - IS READ LATER IN TANK METHOD
    	//controls.grab = controls.gamePad.getRawButton(1); DON'T NEED HERE - IS READ LATER IN INTAKECONTROL
    	//controls.release = controls.gamePad.getRawButton(2); DON'T NEED HERE - IS READ LATER IN INTAKECONTROL

       	intakeControl();
    	
      	Timer.delay(0.005); // wait for motor update time
      	                           
      	SmartDashboard.putDouble( "Joystick Left: ", controls.valJoyL); 
      	SmartDashboard.putDouble( "Joystick Right: ", controls.valJoyR); 

      	setTarget();
      	
      	System.out.println(liftPID + "Lift Tr place");
      	
      	manOverRide = true;
      	
      	liftTF();
      	 
      	tankDrive();
      	
    }
    
    public void tankDrive(){ 
    	
    	controls.valJoyR = controls.stickR.getRawAxis(1);
    	controls.valJoyL = controls.stickL.getRawAxis(1);
    	
    	controls.up = controls.stickR.getRawButton(1);
    	controls.down = controls.stickL.getRawButton(1);
 
    	 if (controls.valJoyR >= .01 || controls.valJoyR <= -.01 || controls.valJoyL >= .01 || controls.valJoyL <= -.01){
         	
         	//System.out.println("tank active");
         	
         	if(controls.up == true && controls.down == false) {
         		
         		controls.halfSpeed = true;
  
         	} else if(controls.down == true && controls.up == false){
         	
         		controls.halfSpeed = false;

         	}
         
         	if (controls.halfSpeed == false){
         	
         		fullSpeedDrive();
         		
               	SmartDashboard.putString("Drive Status: ", "Full");
         		
         	} else if (controls.halfSpeed == true){
         	
         		halfSpeedDrive();
         	
               	SmartDashboard.putString("Drive Status: ", "Half");
         		
         	}
        }  
    }
    
    public void intakeControl() {
    	
    	controls.grab = controls.gamePad.getRawButton(Const.inBtn);
    	controls.release = controls.gamePad.getRawButton(Const.outBtn);   		       
    		
		if (controls.grab==true && controls.release == false){
			
			controls.intakeSol.set(DoubleSolenoid.Value.kForward);//grab
            
			SmartDashboard.putString("Solenoid Status: ", "Forward");
            
        } else if (controls.release==true && controls.grab == false) {
        	
        	controls.intakeSol.set(DoubleSolenoid.Value.kReverse);//release
            
			SmartDashboard.putString("Solenoid Status: ", "Reverse");
            
        }
   }
    
    public void liftTF(){
    	if(controls.gamePad.getRawButton(Const.overideBtn) && manOverRide == false){
      		
      		manOverRide = true;
      		
      	} else if(controls.gamePad.getRawButton(Const.overideBtn) && manOverRide == true){
      		
      		manOverRide = false;
      		
      	}
      	
      	if (manOverRide == true){
      		
      		manualLift();
      	}
      		
      	else if (manOverRide == false){
      		
      		if (liftPID == true){
	      		
	      		liftControl1();
	      		
	      	} else if (encValLift > 10) {
	      		
	      		controls.liftMotor.set(-.5);
	      		
	      	} else {
	      		
	      		controls.liftMotor.stopMotor();
	      	}
      	}
    }
    
    public void fullSpeedDrive(){
    	
    	double joyR = controls.stickR.getRawAxis(1);
        double joyL = controls.stickL.getRawAxis(1); 
        
    	Timer.delay(0.005);
    	
    	joyR *= .95;
    	joyL *= .95;
    	
    	controls.myRobot.tankDrive(-joyR, -joyL);
    	
    }
    
    public void halfSpeedDrive(){
    	
    	double joyR = controls.stickR.getRawAxis(1);
        double joyL = controls.stickL.getRawAxis(1); 
        
    	Timer.delay(0.005);
    	
    	joyR *= .7;
    	joyL *= .7;
    	
    	controls.myRobot.tankDrive(-joyR, -joyL);
    	
    }
    
    public void setTarget(){
    	
    	if (controls.gamePad.getRawButton(Const.level1Btn) == true && controls.gamePad.getRawButton(Const.level2Btn) == false
    	&& controls.gamePad.getRawButton(Const.level3Btn) == false &&  controls.gamePad.getRawButton(Const.drivingLevelBtn) == false
    	&& controls.gamePad.getRawButton(Const.groundBtn) == false && controls.gamePad.getRawButton(Const.level4Btn) == false){
    		
      		liftPID = true;
      		
      		controls.liftTarget = Const.liftLevel1;  
      		
      		SmartDashboard.putString("Lift Status: ", "Level 1");
      		
    	} else if (controls.gamePad.getRawButton(Const.level1Btn) == false &&  controls.gamePad.getRawButton(Const.level2Btn) == true
    	&&  controls.gamePad.getRawButton(Const.level3Btn) == false &&  controls.gamePad.getRawButton(Const.drivingLevelBtn) == false
    	&&  controls.gamePad.getRawButton(Const.groundBtn) == false && controls.gamePad.getRawButton(Const.level4Btn) == false){
    		
    	     liftPID = true;
    	     
    	     controls.liftTarget = Const.liftLevel2;  
    	     
    	     SmartDashboard.putString("Lift Status: ", "Level 2");
    	     
    	} else if (controls.gamePad.getRawButton(Const.level1Btn) == false &&  controls.gamePad.getRawButton(Const.level2Btn) == false
    	&&  controls.gamePad.getRawButton(Const.level3Btn) == true &&  controls.gamePad.getRawButton(Const.drivingLevelBtn) == false
    	&&  controls.gamePad.getRawButton(Const.groundBtn) == false && controls.gamePad.getRawButton(Const.level4Btn) == false){
    		
    	    liftPID = true;
    	    
    	    controls.liftTarget = Const.liftLevel3;  
    	    
    	    SmartDashboard.putString("Lift Status: ", "Level 3"); 
    	    
    	} else if (controls.gamePad.getRawButton(Const.level1Btn) == false &&  controls.gamePad.getRawButton(Const.level2Btn) == false
        &&  controls.gamePad.getRawButton(Const.level3Btn) == false &&  controls.gamePad.getRawButton(Const.drivingLevelBtn) == true
    	&&  controls.gamePad.getRawButton(Const.groundBtn) == false && controls.gamePad.getRawButton(Const.level4Btn) == false){
    		
    	     liftPID = true;
    	     
    	     controls.liftTarget = Const.liftLeveldrive; 
    	     
    	     SmartDashboard.putString("Lift Status: ", "Level Drive");
    	}else if (controls.gamePad.getRawButton(Const.level1Btn) == false &&  controls.gamePad.getRawButton(Const.level2Btn) == false
    	&&  controls.gamePad.getRawButton(Const.level3Btn) == false &&  controls.gamePad.getRawButton(Const.drivingLevelBtn) == false
    	&&  controls.gamePad.getRawButton(Const.groundBtn) == false && controls.gamePad.getRawButton(Const.level4Btn) == true){
    	    	    	    
    		liftPID = true;
    	    	    			
    	    controls.liftTarget = Const.liftLevel4;  
    	    	        	    
    	    SmartDashboard.putString("Lift Status: ", "Level 4"); 
    	    	     
    	} else if (controls.gamePad.getRawButton(Const.level1Btn) == false &&  controls.gamePad.getRawButton(Const.level2Btn) == false
    	&&  controls.gamePad.getRawButton(Const.level3Btn) == false &&  controls.gamePad.getRawButton(Const.drivingLevelBtn) == false
    	&&  controls.gamePad.getRawButton(Const.groundBtn) == true && controls.gamePad.getRawButton(Const.level4Btn) == false){
    	    
    			liftPID = false;
    		
    	}
    }
  
    public void manualLift() {
    	
    	if (controls.gamePad.getRawButton(Const.upBtn) == true) {
  		
   				controls.liftMotor.set(.5);
   				
   				System.out.println( "Manuel override up");
   				
   		}
  	    else if (controls.gamePad.getRawButton(Const.downBtn) == true) {
  		  
  	    		controls.liftMotor.set(-.5);
  	    		
  	    		System.out.println( "Manuel override down");
  	    		
  		} else {
  	    	
  	    		controls.liftMotor.set(0);
  	    }
    }
    
    public void liftControl1() {
    	
    	//set the pid vals to variable USE THESE IN DECLARATION
    	// call liftControl from teleop periodic
    	//get encoder value
    	//hardcode the target for now for testing - always do Lift routine to same spot, eg. 1000

    	double p = 0.001; 
    	double i = 0;
    	double d = 0.0015;
    	double Dt = 0.01; 
    	
    	encValLift = encoderLift.get();
    	
    	System.out.println(encValLift + "encval 1.1");
    	
    	double PIDOUTPUT1 = doPID1(p, i, d, Dt, encValLift, controls.liftTarget);// ONLY CHANGE THE LAST NUMBER DO NOT TOUCH ANYTHING ELSE HERE
    	
	    System.out.println(PIDOUTPUT1 + "output 1.11");
	    
	    PIDOUTPUT1 /= 10;   
     
    	//scales output back by 100 since the potentiometer says a few hundred counts equals less than 100 degrees in RL

    	if(PIDOUTPUT1 > 1){
    		
    		System.out.println("#1.1");
    		
    		PIDOUTPUT1 = .7; 
    		
    		controls.liftMotor.set(PIDOUTPUT1);
 
    		} else if (PIDOUTPUT1 < -1){
    		
    		System.out.println("#2.1");
    		
    		PIDOUTPUT1 = .7;
    		
    		controls.liftMotor.set(PIDOUTPUT1);
       
    		}
    	              
    	if (PIDOUTPUT1 > -1 || PIDOUTPUT1 < 1){
    		
    		System.out.println("#4.1");
    
    		controls.liftMotor.set(PIDOUTPUT1);

    		}
    	
    	//System.out.println(encValLift + "encValLift 2");
    	
    }

    public double doPID1(double P, double I, double D, double dt, float position, float setPoint){ //arm to left is less than 470; to the right greater than 470
    	
       	//you need to translate this into Java syntax and declare your variables
	    //I think the output is the speed

    	Timer.delay(dt);

		SmartDashboard.putDouble( "position: ", position); 
      	SmartDashboard.putDouble( "setPoint: ", setPoint);
      	
		error = position - setPoint;
		
		integral = integral + (error * dt);
		
		derivative = (error - prevError) / dt;
		
		output = (P * error) + (I * integral) + (D * derivative);
		
		prevError = error;
		
		SmartDashboard.putDouble( "error: ", error); 
		SmartDashboard.putDouble( "output: ", output); 
		
		return -output;
    	
	}

	/**
     * This function is called periodically during test mode
     */
    
    public void testPeriodic() {
    	
    	LiveWindow.run();
    	
      	SmartDashboard.putString( "Test Status: ", "Enabled"); 
    	
    }  
}